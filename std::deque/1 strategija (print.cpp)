#include "main.h"
#include <iostream>
#include <stdlib.h>
#include <iomanip>
#include <fstream>
#include <chrono>
#include <deque>

std::deque<studentas> vargsiukai;
std::deque<studentas> kietiakai;

void print ()
{
    for (int x = 0; x < stud.size() - 1; x++) {
        for (int y = x + 1; y < stud.size(); y++) {
             if (stud[x].vardas > stud[y].vardas) {
                    std::swap(stud[x], stud[y]);
            }
        }
    }

    auto start = std::chrono::high_resolution_clock::now();

    std::ofstream v;
    v.open ("vargšiukai.txt");
    std::ofstream k;
    k.open ("kietiakai.txt");

    for (int x = 0; x < stud.size(); x++) 
    {
        if (stud[x].vidurkis < 5)
        {
            vargsiukai.push_back(stud[x]);
        }
        else
        {
            kietiakai.push_back(stud[x]);
        }
    }

    std::string pasirinkti;
    //std::cout << "Ką norėtumėte matyti - vidurkį (Vid) ar medianą (Med)? "; std::cin >> pasirinkti;
    pasirinkti = "vid";
    if (pasirinkti == "vid" || pasirinkti == "Vid")
    {
        for (int a = 0; a < vargsiukai.size(); a++) {
            v << vargsiukai[a].vardas << " " << vargsiukai[a].pavarde << "\t" << std::fixed << std::setprecision(2) << vargsiukai[a].vidurkis << "\r\n";
        }

        for (int b = 0; b < kietiakai.size(); b++) {
            k << kietiakai[b].vardas << " " << kietiakai[b].pavarde << "\t" << std::fixed << std::setprecision(2) << kietiakai[b].vidurkis << "\r\n";
        }
        v.close();
        k.close();
    }
    else
    {
        for (int a = 0; a < vargsiukai.size(); a++) {
            v << vargsiukai[a].vardas << " " << vargsiukai[a].pavarde << "\t" << std::fixed << std::setprecision(2) << vargsiukai[a].vidurkis << "\r\n";
        }

        for (int b = 0; b < kietiakai.size(); b++) {
            k << kietiakai[b].vardas << " " << kietiakai[b].pavarde << "\t" << std::fixed << std::setprecision(2) << kietiakai[b].vidurkis << "\r\n";
        }
        v.close();
        k.close();
    }
    auto end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> diff = end - start;
    std::cout << "Išvedimo į du naujus failus laikas: " << diff.count() << " s\n";
}
