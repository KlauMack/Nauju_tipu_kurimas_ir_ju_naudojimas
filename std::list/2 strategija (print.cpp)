#include "main.h"
#include <iostream>
#include <stdlib.h>
#include <iomanip>
#include <fstream>
#include <chrono>
#include <list>

std::list<studentas> vargsiukai;

void print ()
{
    std::list<studentas>::iterator it;
    std::list<studentas>::iterator it1;

    auto start = std::chrono::high_resolution_clock::now();

    std::ofstream v;
    v.open ("vargšiukai.txt");
    std::ofstream k;
    k.open ("kietiakai.txt");

    for (int x = 0; x < stud.size(); x++) 
    {
        it = std::next(stud.begin(), x);
        if (it->vidurkis < 5)
        {
            vargsiukai.push_back(*it);
        }
    }

    for (auto it = stud.begin(); it != stud.end(); it++)
    {
        if (it->vidurkis < 5)
        {
            stud.erase(it--);
        }
    }

    std::string pasirinkti;
    //std::cout << "Ką norėtumėte matyti - vidurkį (Vid) ar medianą (Med)? "; std::cin >> pasirinkti;
    pasirinkti = "vid";
    if (pasirinkti == "vid" || pasirinkti == "Vid")
    {
        for (int a = 0; a < vargsiukai.size(); a++) {
            it1 = std::next(vargsiukai.begin(), a);
            v << it1->vardas << " " << it1->pavarde << "\t" << std::fixed << std::setprecision(2) << it1->vidurkis << "\r\n";
        }

        for (int b = 0; b < stud.size(); b++) {
            it = std::next(stud.begin(), b);
            k << it->vardas << " " << it->pavarde << "\t" << std::fixed << std::setprecision(2) << it->vidurkis << "\r\n";
        }
        v.close();
        k.close();
        stud.clear();
        vargsiukai.clear();
    }
    else
    {
        for (int a = 0; a < vargsiukai.size(); a++) {
            it1 = std::next(vargsiukai.begin(), a);
            v << it1->vardas << " " << it1->pavarde << "\t" << std::fixed << std::setprecision(2) << it1->vidurkis << "\r\n";
        }

        for (int b = 0; b < stud.size(); b++) {
            it = std::next(stud.begin(), b);
            k << it->vardas << " " << it->pavarde << "\t" << std::fixed << std::setprecision(2) << it->vidurkis << "\r\n";
        }
        v.close();
        k.close();
        stud.clear();
        vargsiukai.clear();
    }
    auto end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> diff = end - start;
    std::cout << "Išvedimo į du naujus failus laikas: " << diff.count() << " s\n";
}
